'=======================================
' ブロック崩し モドキ
' 2018/01/19 sacokoala
'=======================================
'-------------------
' GLOBAL VARIABLE

' 0=SmileBASIC 1=MZ-80C 2=both
VAR mz_mode=0
' MZ-80C 40*25 CONSOLE
VAR mz_console_x_max=40
VAR mz_console_y_max=25
VAR mz_console_addr=&HD000
VAR mz_buff_r_ptr=0
VAR mz_buff_w_ptr=0
VAR mz_buff_max=256
DIM mz_buff_addr[mz_buff_max]
DIM mz_buff_chr[mz_console_x_max*mz_buff_max]

VAR BGDOT_X=-1,BGDOT_Y=-1
VAR BGBOX_X=-1,BGBOX_Y=-1

' MZ-80C 40*25 CONSOLE
VAR WIDTH_MZ=40*8
VAR HEIGHT_MZ=25*8

VAR USE_SP=TRUE
VAR HI_SCORE=100
VAR i,j

'-------------------
' SELECT_SB_MZ
SELECT_SB_MZ

' INIT
SB_INIT
MZ_INIT

'-------------------
CLS_MZ
'XSCREEN 2
'XSCREEN 320,240
VISIBLE 1,0,0
'IF MODE==1 THEN DISPLAY 1
ZANKI=0
WHILE 1
 GOSUB @INITGAME
 BEEP 1
 MESSAGE "STAGE "+STR$(STAGE)
 WHILE 1
  GOSUB @PADDLE
  GOSUB @BALL
  'GOSUB @STATUS
  GOSUB @SCORE
  IF (BCNT<=0) OR (ZANKI<=0) THEN BREAK
  UPDATE_MZ
  VSYNC 1
 WEND
 IF BCNT<=0 THEN
  BEEP 5
  MESSAGE "CLEAR!"
  STAGE=STAGE+1
  'IF STAGE>3 THEN BREAK
  IF STAGE>4 THEN STAGE=1
 ELSE
  MESSAGE "GAME OVER"
 ENDIF
 IF SCORE>HI_SCORE THEN
  HI_SCORE=SCORE
 ENDIF
WEND
END
'-------------------

'初期化
@INITGAME
'FOR i=0 TO 320 STEP 8
' GLINE i,0,i,239,RGB(0,64,0)
' GLINE 0,i,319,i,RGB(0,64,0)
'NEXT
IF mz_mode<=0 THEN
 FOR i=0 TO WIDTH_MZ STEP 8
  GLINE i,0,i,(HEIGHT_MZ-1)-8,RGB(0,64,0)
 IF i<=HEIGHT_MZ-16 THEN
   GLINE 0,i,WIDTH_MZ-1,i,RGB(0,64,0)
  ENDIF
 NEXT
ENDIF
IF ZANKI<=0 THEN
 STAGE=1
 SCORE=0
 ZANKI=3
 GOSUB @TITLE
ENDIF

GOSUB @INITMAP
BGDOT_X=-1:BGDOT_Y=-1
GOSUB @INITPADDLE
GOSUB @INITBALL
IF (mz_mode<=0) AND (USE_SP==TRUE) THEN
 VISIBLE 1,1,1
ELSE
 VISIBLE 1,0,0
ENDIF
GOSUB @STATUS
RETURN

'パドル初期化
@INITPADDLE
AN=0
SPSET AN,3522
SPOFS AN,WIDTH_MZ/2,HEIGHT_MZ-20
SPCOL AN,TRUE
COLOR_MZ #SILVER
IF (mz_mode>0) OR (USE_SP==FALSE) THEN
 BGBOX WIDTH_MZ/2-16,HEIGHT_MZ-20
ENDIF
COLOR_MZ #WHITE
RETURN

'ボール初期化
@INITBALL
BN=1
SPSET BN,3525
'SPOFS BN,160,160
SPOFS BN,WIDTH_MZ/2,HEIGHT_MZ-70
'SPOFS AN OUT AX,AY
'SPOFS BN,AX,AY-8
SPCOL BN,TRUE
'SPHIDE BN
X1=0
'Y1=1
Y1=0.7
'R=30
'SPD=2
'X1=COS(R)*SPD
'Y1=SIN(R)*SPD
COLOR_MZ #YELLOW
IF (mz_mode>0) OR (USE_SP==FALSE) THEN
 SPOFS BN OUT BX,BY
 BGDOT BX,BY
ENDIF
COLOR_MZ #WHITE
RETURN

'マップ初期化
@INITMAP
'LAY=0
'BGSCREEN LAY,25,15
'BGOFS LAY,0,0,0
DIM LAY[WIDTH_MZ/16,HEIGHT_MZ/16]
RESTORE "@MAP"+STR$(STAGE)
BCNT=0
FOR j=0 TO HEIGHT_MZ/16-1
 ' DEBUG
 'PRINT "j=";j
 READ A$
 ' DEBUG
 'PRINT "j=";j;" A$=";A$
 FOR i=O TO LEN(A$)-1
  C=VAL(MID$(A$,i,1))
  ' DEBUG
  'PRINT "j=";j;" i=";i;" C=";C
  'BGPUT LAY,i,j,C
  LAY[i,j]=C
  IF C>1 THEN BCNT=BCNT+1
 NEXT
NEXT
FOR j=0 TO HEIGHT_MZ/16-1
 ' DEBUG
 'PRINT "j=";j
 'READ A$
 FOR i=O TO LEN(A$)-1
  'C=VAL(MID$(A$,i,1))
  C=LAY[i,j]
  ' DEBUG
  'PRINT "j=";j;" i=";i;" C=";C
  BGPUT2 i,j,C
  'IF C>1 THEN BCNT=BCNT+1
 NEXT
 UPDATE_MZ
 VSYNC 1
NEXT
RETURN


'メッセージ
DEF MESSAGE A$
 TY=14
 'COLOR 11,0
 COLOR2_MZ #PURPLE,#BLACK
 LOCATE_MZ 20-(LEN(A$)/2),TY:PRINT_MZ A$
 UPDATE_MZ
 COLOR2_MZ #WHITE,0
 VSYNC 120
 LOCATE_MZ 2,TY:PRINT_MZ " "*36
 UPDATE_MZ
 VSYNC 1
END

'ステータス
@STATUS
'COLOR 13,8
COLOR2_MZ #AQUA,#NAVY
LOCATE_MZ 8,0
'PRINT_MZ " SCORE ";FORMAT$("%05D",SCORE);
PRINT_MZ " SCORE "+FORMAT$("%05D",SCORE)+"   "
LOCATE_MZ 20,0
'PRINT_MZ "   PLAYERx",ZANKI;" "
IF mz_mode==0 THEN
 PRINT_MZ "   PLAYERx"+STR$(ZANKI)+" "
ELSE
 PRINT_MZ "   PLAYER "+STR$(ZANKI)+" "
ENDIF
COLOR2_MZ #WHITE,0
RETURN

@SCORE
COLOR2_MZ #AQUA,#NAVY
 LOCATE_MZ 15,0
 PRINT_MZ FORMAT$("%05D",SCORE)
COLOR2_MZ #WHITE,0
RETURN

'パドル
@PADDLE
SPOFS AN OUT AX,AY
'IF MODE==0 THEN
 'STICK OUT SX,SY
 SX=STICK(#STICK_LX)/32768
 SY=STICK(#STICK_LY)/32768
 'AX=AX+(SX*8)
'ELSE
 'SX=0
 C$=INKEY$()
 IF c$=="Z" THEN SX=-1 
 IF c$=="C" THEN SX=1
 IF c$=="," THEN SX=-1
 IF c$=="/" THEN SX=1
 AX=AX+(SX*8)
'ENDIF
IF AX<32  THEN AX=32
IF AX>WIDTH_MZ-32 THEN AX=WIDTH_MZ-32
SPOFS AN,AX,AY
COLOR_MZ #SILVER
IF (mz_mode>0) OR (USE_SP==FALSE) THEN
 BGBOX AX-16,AY
ENDIF
COLOR_MZ #WHITE
RETURN

'ボール
@BALL
SPOFS BN OUT X,Y
IF SPHITSP(AN)==BN THEN
 'BEEP 9,-1000
 BEEP 4
 Y=AY-8
 R=ATAN(Y-AY,X-AX)
 SPD=2
 X1=COS(R)*SPD
 Y1=SIN(R)*SPD
ENDIF
IF BGHIT(X+0,Y-4) THEN Y1=-Y1
IF BGHIT(X+0,Y+4) THEN Y1=-Y1
IF BGHIT(X-4,Y+0) THEN X1=-X1
IF BGHIT(X+4,Y+0) THEN X1=-X1
X=X+X1
Y=Y+Y1
SPOFS BN, X, Y
COLOR_MZ #YELLOW
IF (mz_mode>0) OR (USE_SP==FALSE) THEN
 BGDOT X,Y
ENDIF
COLOR_MZ #WHITE
'IF Y>248 THEN
IF Y>HEIGHT_MZ-16 THEN
 ZANKI=ZANKI-1
 GOSUB @STATUS
 BEEP 3
 MESSAGE "MISS"
 IF ZANKI THEN
  GOSUB @INITPADDLE
  GOSUB @INITBALL
 ENDIF
ENDIF
RETURN

'ブロック　あたり判定
DEF BGHIT(X,Y)
 IF X<0 OR Y<0 OR X>WIDTH_MZ-1 OR Y>HEIGHT_MZ-1 THEN
  RETURN 0
 ENDIF
 BX=FLOOR(X/16)
 BY=FLOOR(Y/16)
 C=BGGET(LAY,BX,BY)
 'IF C>0 THEN BEEP 9,C*500
 IF C>0 THEN BEEP 4
 IF C>1 THEN
  BGPUT LAY,BX,BY,0
  SCORE=SCORE+10
  BCNT=BCNT-1
 ENDIF
 RETURN C
END

'タイトル
@TITLE
VISIBLE 1,0,0
CLS_MZ
'COLOR 15,2
LOCATE_MZ 12,5:PRINT_MZ ">> フ゛ロック クス゛シ <<"
LOCATE_MZ 12,7:PRINT_MZ "PUSH ANY BUTTON"
LOCATE_MZ 12,10:PRINT_MZ "  [Z]・・・ ヒタ゛リ"
LOCATE_MZ 12,11:PRINT_MZ "  [C]・・・ ミキ゛"
'LOCATE_MZ 12,14:PRINT_MZ " HI SCORE ";FORMAT$("%05D",HI_SCORE);
LOCATE_MZ 12,14:PRINT_MZ " HI SCORE "+FORMAT$("%05D",HI_SCORE)
'COLOR 15,0
'WHILE BUTTON(1)==0
FOR i=0 TO 30
 'キーリピート
 C$=INKEY$()
NEXT
WHILE 1
 IF BUTTON()!=0 THEN BREAK
 IF INKEY$()!="" THEN BREAK
 UPDATE_MZ
 VSYNC 1
WEND
CLS_MZ
RETURN

'ステージデータ
@MAP1
DATA "11111111111111111111"
DATA "1                  1"
DATA "1                  1"
DATA "1  22222222222222  1"
DATA "1  22222222222222  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
@MAP2
DATA "11111111111111111111"
DATA "1                  1"
DATA "1    22222 2222    1"
DATA "1    2 2 2   2     1"
DATA "1    2 2 2  2      1"
DATA "1    2 2 2 2222    1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
@MAP3
DATA "11111111111111111111"
DATA "1                  1"
DATA "1  22222222222     1"
DATA "1                  1"
DATA "1    22222222222   1"
DATA "1     22222222222  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
@MAP4
DATA "11111111111111111111"
DATA "1                  1"
DATA "1  222222  222222  1"
DATA "1  2    2112    2  1"
DATA "1  2    2112    2  1"
DATA "1  222222  222222  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"
DATA "1                  1"


'-------------------------
'BG
DEF BGPUT BUFF,X,Y,CHR
 BUFF[X,Y]=CHR
 BG0$="  "
 BG1$="  "
 IF CHR==0 THEN
 COLOR_MZ #WHITE
  BG0$="  "
  BG1$="  "
 ELSEIF CHR==1 THEN
  COLOR_MZ #GRAY
  BG0$=""
  BG1$=""
 ELSEIF CHR==2 THEN
  COLOR_MZ #WHITE
  BG0$=""
  BG1$=""
 ENDIF
 LOCATE_MZ X*2,Y*2
 PRINT_MZ BG0$
 LOCATE_MZ X*2,Y*2+1
 PRINT_MZ BG1$
 COLOR_MZ #WHITE
END

DEF BGPUT2 X,Y,CHR
 COLOR2_MZ #WHITE,0
 BG0$="  "
 BG1$="  "
 IF CHR==0 THEN
  BG0$="  "
  BG1$="  "
 ELSEIF CHR==1 THEN
  COLOR2_MZ #GRAY,0
  BG0$=""
  BG1$=""
 ELSEIF CHR==2 THEN
  COLOR2_MZ #WHITE,0
  IF mz_mode==0 THEN
   BG0$=""
  ELSE
   'BG0$=""
   BG0$=""
  ENDIF
  BG1$=""
 ENDIF
 LOCATE_MZ X*2,Y*2
 PRINT_MZ BG0$
 LOCATE_MZ X*2,Y*2+1
 PRINT_MZ BG1$
 COLOR2_MZ #WHITE,0
END

DEF BGGET(BUFF,X,Y)
 IF Y>=HEIGHT_MZ/16 THEN RETURN 0
 RETURN BUFF[X,Y]
END

DEF BGDOT X,Y
 VAR BG_X=X DIV 8
 VAR BG_Y=Y DIV 8
 VAR BG$=""
 ' DEBUG
 'PRINT "BG_X=";BG_X;" BG_Y=";BG_Y;" X=";X;" Y=";Y
 IF (X MOD 8)>=4 THEN
  IF (Y MOD 8)>=4 THEN
   BG$=""
  ELSE
   BG$=""
  ENDIF
 ELSE
  IF (Y MOD 8)>=4 THEN
   BG$=""
  ELSE
   BG$=""
  ENDIF
 ENDIF
 IF BG_X<0 THEN BG_X=0
 IF BG_X>=WIDTH_MZ/8-1 THEN BG_X=WIDTH_MZ/8-2
 IF BG_Y<0 THEN BG_Y=0
 IF BG_Y>=HEIGHT_MZ/8-1 THEN BG_Y=HEIGHT_MZ/8-2
 IF BGDOT_X>0 THEN
  VAR TEMP_X,TEMP_Y
  TEMP_X=BGDOT_X
  TEMP_Y=BGDOT_Y
  'LOCATE_MZ BGDOT_X,BGDOT_Y
  LOCATE_MZ TEMP_X,TEMP_Y
  PRINT_MZ " "
 ENDIF
 LOCATE_MZ BG_X,BG_Y
 PRINT_MZ BG$
 BGDOT_X=BG_X
 BGDOT_Y=BG_Y
END

DEF BGBOX X,Y
 VAR BG_X=X DIV 8
 VAR BG_Y=Y DIV 8
 'VAR BG$=""
 VAR BG0$=""
 VAR BG1$=""
 'IF (X MOD 8)>=4 THEN
 ' BG$=""
 'ELSE
 ' BG$=""
 'ENDIF
 IF (X MOD 8)>=5 THEN
  BG0$=" "
  'BG1$=" "
 ELSEIF (X MOD 8)>=3 THEN
  BG0$=""
  'BG1$="  "
 ELSE
  BG0$=""
  'BG1$=""
 ENDIF
 'RIGHT SIDE WALL IN?
 IF BG_X>WIDTH_MZ/8-8 THEN
  BG0$=LEFT$(BG0$,LEN(BG0$))
  'BG1$=LEFT$(BG1$,LEN(BG1$))
 ENDIF
 IF BG_X<0 THEN BG_X=0
 IF BG_X>=WIDTH_MZ/8-1 THEN BG_X=WIDTH_MZ/8-2
 IF BG_Y<0 THEN BG_Y=0
 IF BG_Y>=HEIGHT_MZ/8-1 THEN BG_Y=HEIGHT_MZ/8-2
 IF BGBOX_X>0 THEN
  'RIGHT SIDE WALL IN?
  IF BGBOX_X>WIDTH_MZ/8-8 THEN
   LOCATE_MZ BGBOX_X,BGBOX_Y
   PRINT_MZ "    "
   'LOCATE_MZ BGBOX_X,BGBOX_Y+1
   'PRINT_MZ "    "
  ELSE
   LOCATE_MZ BGBOX_X,BGBOX_Y
   PRINT_MZ "     "
   'LOCATE_MZ BGBOX_X,BGBOX_Y+1
   'PRINT_MZ "     "
  ENDIF
 ENDIF
 LOCATE_MZ BG_X,BG_Y
 PRINT_MZ BG0$
 'LOCATE_MZ BG_X,BG_Y+1
 'PRINT_MZ BG1$
 BGBOX_X=BG_X
 BGBOX_Y=BG_Y
 'IF BG_X>WIDTH_MZ/8-8 THEN
 ' COLOR_MZ #GRAY
 ' LOCATE_MZ WIDTH_MZ/8-2,BG_Y
 ' PRINT_MZ ""
 ' 'LOCATE_MZ WIDTH_MZ/8-2,BG_Y+1
 ' 'PRINT_MZ ""
 ' COLOR_MZ #WHITE
 'ENDIF
END


'=======================================

'-------------------
' SELECT_SB_MZ
DEF SELECT_SB_MZ
 VAR sel$
 ACLS
 VISIBLE 1,0,0
 mz_mode=-1
 WHILE mz_mode==-1
  VSYNC 1
  CLS
  'PRINT "Select game mode.(0:SmileBasic 1:MZ-80C)"
  'sel$=INKEY$()
  LOCATE 2,2
  INPUT"Select game mode.(0:SmileBasic 1:MZ-80C 2:both)";sel$
  IF sel$=="0" THEN
   mz_mode=0
  ELSEIF sel$=="1" THEN
   mz_mode=1
  ELSEIF sel$=="2" THEN
   mz_mode=2
  ELSE
   mz_mode=-1
  ENDIF
 WEND
END

'-------------------
' SB_INIT
DEF SB_INIT
 ACLS
 CLS
 VISIBLE 1,0,0
 IF mz_mode>=1 THEN
  XSCREEN 640,360,16/9
 ELSE
  XSCREEN 320,240,4/3
 ENDIF
END

'-------------------
' MZ_INIT
DEF MZ_INIT
 IF mz_mode>=1 THEN
  ' MZ-80C RESET
  EMURESET
  ' MZ-80C 320*200 (40*25 CONSOLE)
  IF mz_mode==1 THEN
   'EMUWINDOW 960,0,320,200
   'EMUWINDOW 640,0,640,400
   EMUWINDOW 320,0,960,600
   'EMUWINDOW 5
   ' CURSOR OFF
   'mem_e000=EMUMEM(&HE000)
   'EMUMEM &HE000, mem_e000 OR &H80
   PRINT " "
   PRINT "MZ-80C CLOSE COMMAND"
   PRINT " "
   PRINT "[EMUWINDOW 0]"
   PRINT "  OR"
   PRINT "[ACLS]"
   PRINT " "
  ELSEIF mz_mode==2 THEN
   EMUWINDOW 640,0,640,400
  ENDIF
  VSYNC 180
 ELSE
  EMUWINDOW 0
 ENDIF

END


'=======================================

'-------------------
' UPDATE_MZ
DEF UPDATE_MZ
 VAR i,j
 IF mz_mode==0 OR mz_mode==2 THEN
  ' SmileBASIC NO UPDATE
 ENDIF
 IF mz_mode>=1 THEN
  FOR j=0 TO mz_buff_max-1
   IF mz_buff_r_ptr==mz_buff_w_ptr THEN BREAK
   FOR i=0 TO mz_console_x_max-1
    ' DEBUG
    'PRINT "i    &H";HEX$(i)
    'PRINT "addr &H";HEX$(mz_buff_addr[mz_buff_r_ptr]+i)
    'PRINT "chr  &H";HEX$(mz_buff_chr[mz_console_x_max*mz_buff_r_ptr+i])
    IF mz_buff_chr[mz_console_x_max*mz_buff_r_ptr+i]==-1 THEN BREAK
    EMUMEM mz_buff_addr[mz_buff_r_ptr]+i, mz_buff_chr[mz_console_x_max*mz_buff_r_ptr+i]
   NEXT
   mz_buff_r_ptr=mz_buff_r_ptr+1
   IF mz_buff_r_ptr>=mz_buff_max THEN mz_buff_r_ptr=0
  NEXT
 ENDIF
END

'-------------------
' CLS_MZ
DEF CLS_MZ
 VAR i
 IF mz_mode==0 OR mz_mode==2 THEN
  CLS
 ENDIF
 IF mz_mode>=1 THEN
  ' MZ-80C 40*25 CONSOLE
  FOR i=0 TO mz_console_x_max*mz_console_y_max-1
   EMUMEM &HD000+i, 0
  NEXT
 ENDIF
END

'-------------------
' COLOR_MZ
DEF COLOR_MZ col
 IF mz_mode==0 OR mz_mode==2 THEN
  COLOR2_MZ col,0
 ENDIF
 IF mz_mode>=1 THEN
  ' MZ-80C NO COLOR (ALL GREEN)
 ENDIF
END
DEF COLOR2_MZ col,col2
 IF mz_mode==0 OR mz_mode==2 THEN
  COLOR col,col2
 ENDIF
 IF mz_mode>=1 THEN
  ' MZ-80C NO COLOR (ALL GREEN)
 ENDIF
END

'-------------------
' LOCATE_MZ
DEF LOCATE_MZ x,y
 ' DEBUG
 IF (x<0)OR(x>=mz_console_x_max) THEN
  PRINT "LOCATE_MZ ERROR x=";x
 ENDIF
 IF (y<0)OR(y>=mz_console_y_max) THEN
  PRINT "LOCATE_MZ ERROR y=";y
 ENDIF
 IF mz_mode==0 OR mz_mode==2 THEN
  LOCATE x,y
 ENDIF
 IF mz_mode>=1 THEN
  ' MZ-80C 40*25 CONSOLE
  'mz_console_addr = &HD000 + (x + mz_console_x_max*y)
  DIM addr[1]
  addr[0]=&HD000 + (x + mz_console_x_max*y)
  COPY mz_buff_addr,mz_buff_w_ptr,addr
  ' DEBUG
  'PRINT "w_ptr &H";HEX$(mz_buff_w_ptr)
  'PRINT "buff  &H";HEX$(mz_buff_addr[mz_buff_w_ptr])
  'mz_buff_w_ptr=mz_buff_w_ptr+1
  'IF mz_buff_w_ptr>=mz_buff_max THEN mz_buff_w_ptr=0
 ENDIF
 ' DEBUG
 'PRINT "L",x,y
END

'-------------------
' PRINT_MZ
DEF PRINT_MZ str0$
 VAR i
 VAR str_ascii,str_mz
 VAR input_str$,output_num
 VAR str1$
 DIM chr_mz[1]
 ' DUMMY
 str1$=str0$+"0"
 IF mz_mode==0 OR mz_mode==2 THEN
  PRINT str0$
 ENDIF
 IF mz_mode>=1 THEN
  ' DEBUG
  'PRINT "r_ptr &H";HEX$(mz_buff_r_ptr)
  'PRINT "buff  &H";HEX$(mz_buff_addr[mz_buff_r_ptr])
  ' MZ-80C ORIGINAL CHAR
  'FOR i=0 TO LEN(str1$)-1
  FOR i=0 TO LEN(str1$)-1
   'str_ascii=ASC(str0$[i])
   str_ascii=ASC(str1$[i])
   str_mz=-1
   IF (str_ascii>=ASC("A")) AND (str_ascii<=ASC("Z")) THEN
    ' A-Z
    str_mz=str_ascii-ASC("A")+&H01
   ELSEIF (str_ascii>=ASC("a")) AND (str_ascii<=ASC("z")) THEN
    ' a-z
    str_mz=str_ascii-ASC("a")+&H01
   ELSEIF (str_ascii>=ASC("0")) AND (str_ascii<=ASC("9")) THEN
    ' 0-9
    str_mz=str_ascii-ASC("0")+&H20
   ELSEIF (str_ascii>=ASC("!")) AND (str_ascii<=ASC(")")) THEN
    ' !"#$%&'()
    str_mz=str_ascii-ASC("!")+&H61
   ELSE
    ' TABLE REFARENCE
    RESTORE @CONV_STR_TABLE
    WHILE 1
     READ input_str$,output_num
     IF input_str$=="" THEN BREAK
     IF str_ascii==ASC(input_str$) THEN
      str_mz=output_num
      BREAK
     ENDIF
    WEND
    IF str_mz==-1 THEN
     ' ETC.(SPACE)
     str_mz=&H00
    ENDIF
   ENDIF
   ' DEBUG
   'PRINT "ASC  &H";HEX$(str_ascii)
   'PRINT "MZ   &H";HEX$(str_MZ)
   'PRINT "addr &H";HEX$(mz_buff_addr[mz_buff_r_ptr])
   IF str_mz<0 THEN str_mz=0
   ' LAST CHAR
   IF i>=LEN(str1$)-1 THEN
    str_mz=-1
   ENDIF
   'EMUMEM mz_console_addr, str_mz
   'mz_console_addr=mz_console_addr+1
   'EMUMEM mz_buff_addr[mz_buff_r_ptr], str_mz
   'mz_buff_addr[mz_buff_r_ptr]=mz_buff_addr[mz_buff_r_ptr]+1
   chr_mz[0]=str_mz
   COPY mz_buff_chr,mz_console_x_max*mz_buff_w_ptr+i,chr_mz
   ' DEBUG
   'PRINT "chr  &H";HEX$(chr_mz[0])
   'PRINT "ptr  &H";HEX$(mz_console_x_max*mz_buff_w_ptr+i)
   'PRINT "buff  &H";HEX$(mz_buff_chr[mz_console_x_max*mz_buff_w_ptr+i])
  NEXT
  'mz_buff_r_ptr=mz_buff_r_ptr+1
  'IF mz_buff_r_ptr>=mz_buff_max THEN mz_buff_r_ptr=0
  mz_buff_w_ptr=mz_buff_w_ptr+1
  IF mz_buff_w_ptr>=mz_buff_max THEN mz_buff_w_ptr=0
 ENDIF

 @CONV_STR_TABLE
  ' ASCII KIGOU
  DATA "*",&H6B
  DATA "+",&H6A
  DATA ",",&H2F
  DATA "-",&H2A
  DATA ".",&H2E
  DATA "/",&H2D
  DATA ":",&H4F
  DATA ";",&H2C
  DATA "<",&H51
  DATA "=",&H2B
  DATA ">",&H57
  DATA "?",&H49
  DATA "@",&H55
  DATA "[",&H52
  DATA "\",&HDD
  DATA "]",&H54
  DATA "|",&H35
  DATA "=",&H2B
  ' KANA
  DATA "チ",&H81
  DATA "コ",&H82
  DATA "ソ",&H83
  DATA "シ",&H84
  DATA "イ",&H85
  DATA "ハ",&H86
  DATA "キ",&H87
  DATA "ク",&H88
  DATA "ニ",&H89
  DATA "マ",&H8A
  DATA "ノ",&H8B
  DATA "リ",&H8C
  DATA "モ",&H8D
  DATA "ミ",&H8E
  DATA "ラ",&H8F
  DATA "セ",&H90
  DATA "タ",&H91
  DATA "ス",&H92
  DATA "ト",&H93
  DATA "カ",&H94
  DATA "ナ",&H95
  DATA "ヒ",&H96
  DATA "テ",&H97
  DATA "サ",&H98
  DATA "ン",&H99
  DATA "ツ",&H9A
  DATA "ロ",&H9B
  DATA "ケ",&H9C
  DATA "「",&H9D
  DATA "ァ",&H9E
  DATA "ャ",&H9F
  DATA "ワ",&HA0
  DATA "ヌ",&HA1
  DATA "フ",&HA2
  DATA "ア",&HA3
  DATA "ウ",&HA4
  DATA "エ",&HA5
  DATA "オ",&HA6
  DATA "ヤ",&HA7
  DATA "ユ",&HA8
  DATA "ヨ",&HA9
  DATA "ホ",&H9A
  DATA "ヘ",&HAB
  DATA "レ",&HAC
  DATA "メ",&HAD
  DATA "ル",&HAE
  DATA "ネ",&HAF
  DATA "ム",&HB0
  DATA "」",&HB1
  DATA "ィ",&HB2
  DATA "ュ",&HB3
  DATA "ヲ",&HB4
  DATA "、",&HB5
  DATA "ゥ",&HB6
  DATA "ョ",&HB7
  DATA "゜",&HB8
  DATA "．",&HB9
  DATA "ェ",&HBA
  DATA "ッ",&HBB
  DATA "゛",&HBC
  DATA "。",&HBD
  DATA "ォ",&HBE
  DATA "ー",&HBF
  ' KIGOU
  'DATA "",&H10
  'DATA "",&H11
  'DATA "",&H12
  'DATA "",&H13
  'DATA "",&H14
  'DATA "",&H15
  'DATA "",&H16
  'DATA "",&H17
  'DATA "",&H18
  'DATA "",&H19
  'DATA "",&H1A
  DATA "",&H1B
  DATA "",&H1C
  DATA "",&H1D
  DATA "",&H1E
  DATA "",&H1F
  'DATA "",&H30
  'DATA "",&H31
  'DATA "",&H32
  'DATA "",&H33
  'DATA "",&H34
  'DATA "",&H35
  'DATA "",&H36
  DATA "",&H37
  'DATA "",&H38
  DATA "",&H39
  'DATA "",&H3A
  'DATA "",&H3B
  DATA "",&H3C
  'DATA "",&H3D
  DATA "",&H3E
  'DATA "",&H3F
  DATA "　",&H40
  DATA "♠",&H41
  DATA "",&H42
  DATA "",&H43
  DATA "♦",&H44
  DATA "←",&H45
  DATA "♣",&H46
  DATA "●",&H47
  DATA "",&H48
  DATA "？",&H49
  DATA "",&H4A
  'DATA "",&H4B
  'DATA "",&H4C
  DATA "",&H4D
  DATA "",&H4E
  DATA "：",&H4F
  DATA "↑",&H50
  DATA "＜",&H51
  DATA "[",&H52
  DATA "♥",&H53
  DATA "]",&H54
  DATA "＠",&H55
  DATA "",&H56
  DATA "＞",&H57
  'DATA "",&H58
  'DATA "",&H59
  DATA "",&H5A
  'DATA "",&H5B
  DATA "",&H5C
  DATA "",&H5D
  DATA "",&H5E
  DATA "",&H5F
  'DATA "",&H60
  'DATA "",&H61
  'DATA "",&H62
  'DATA "",&H63
  'DATA "",&H64
  'DATA "",&H65
  'DATA "",&H66
  'DATA "",&H67
  'DATA "",&H68
  'DATA "",&H69
  'DATA "",&H6A
  'DATA "",&H6B
  'DATA "",&H6C
  DATA "",&H6D
  'DATA "",&H6E
  'DATA "",&H6F
  'DATA "",&H70
  'DATA "",&H71
  'DATA "",&H72
  'DATA "",&H73
  'DATA "",&H74
  'DATA "",&H75
  DATA "",&H76
  DATA "",&H77
  'DATA "",&H78
  'DATA "",&H79
  DATA "",&H7A
  'DATA "",&H7B
  'DATA "",&H7C
  'DATA "",&H7D
  DATA "",&H7E
  'DATA "",&H7F
  DATA "",&HC0
  'DATA "",&HC1
  'DATA "",&HC2
  'DATA "",&HC3
  'DATA "",&HC4
  'DATA "",&HC5
  'DATA "",&HC6
  DATA "",&HC7
  DATA "",&HC8
  DATA "",&HC9
  DATA "",&HCA
  DATA "",&HCB
  DATA "",&HCC
  DATA "",&HCD
  DATA "",&HCE
  DATA "",&HCF
  ' KANJI
  DATA "日",&HD0
  DATA "月",&HD1
  DATA "火",&HD2
  DATA "水",&HD3
  DATA "木",&HD4
  DATA "金",&HD5
  DATA "土",&HD6
  DATA "生",&HD7
  DATA "年",&HD8
  DATA "時",&HD9
  DATA "分",&HDA
  DATA "秒",&HDB
  DATA "円",&HDC
  DATA "￥",&HDD
  DATA "£",&HDE
  DATA "",&HDF
  'DATA "",&HE0
  'DATA "",&HE1
  'DATA "",&HE2
  'DATA "",&HE3
  'DATA "",&HE4
  'DATA "",&HE5
  'DATA "",&HE6
  'DATA "",&HE7
  'DATA "",&HE8
  'DATA "",&HE9
  'DATA "",&HEA
  'DATA "",&HEB
  DATA "",&HEC
  DATA "",&HED
  'DATA "",&HEE
  'DATA "",&HEF
  ' 2*2 DOT
  'DATA "",&HF0
  DATA "",&HF1
  DATA "",&HF2
  DATA "",&HF3
  DATA "",&HF4
  DATA "",&HF5
  DATA "",&HF6
  DATA "",&HF7
  DATA "",&HF8
  DATA "",&HF9
  DATA "",&HFA
  DATA "",&HFB
  DATA "",&HFC
  DATA "",&HFD
  DATA "",&HFE
  DATA "",&HFF
  DATA "",0
END

